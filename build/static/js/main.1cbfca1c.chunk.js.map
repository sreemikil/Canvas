{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colors","size","App","canvasRef","useRef","ctx","useState","selectedColor","setSelectedColor","selectedsize","setSelectedsize","mouseDown","setMouseDown","x","y","lastPosition","setPosition","useEffect","current","getContext","draw","useCallback","beginPath","strokeStyle","lineWidth","lineJoin","moveTo","lineTo","closePath","stroke","download","a","image","toDataURL","fetch","blob","blobURL","URL","createObjectURL","link","document","createElement","href","click","onMouseUp","e","className","style","border","width","height","ref","onMouseDown","pageX","pageY","onMouseLeave","onMouseMove","padding","color","borderRadius","value","onChange","target","map","marginLeft","onClick","clearRect","canvas","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1cbfca1c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nconst colors = [\n  \"Black\",\n  \"White\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\"\n]\n\nconst size = [\n  \"1\",\n  \"2\",\n  \"4\",\n  \"8\",\n  \"10\"\n]\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const ctx = useRef(null);\n\n  const [selectedColor, setSelectedColor] = useState(colors[0]);\n  const [selectedsize, setSelectedsize] = useState(size[0]);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [lastPosition, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      ctx.current = canvasRef.current.getContext('2d');\n    }\n  }, []);\n\n  const draw = useCallback((x, y) => {\n    if (mouseDown) {\n      ctx.current.beginPath();\n      ctx.current.strokeStyle = selectedColor;\n      ctx.current.lineWidth = selectedsize;\n      ctx.current.lineJoin = 'round';\n      ctx.current.moveTo(lastPosition.x, lastPosition.y);\n      ctx.current.lineTo(x, y);\n      ctx.current.closePath();\n      ctx.current.stroke();\n\n      setPosition({\n        x,\n        y\n      })\n    }\n  }, [lastPosition, mouseDown, selectedColor,selectedsize, setPosition])\n\n  const download = async () => {\n    const image = canvasRef.current.toDataURL('image/png');\n    const blob = await (await fetch(image)).blob();\n    const blobURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = blobURL;\n    link.download = \"image.png\";\n    link.click();\n  }\n\n  const clear = () => {\n    ctx.current.clearRect(0, 0, ctx.current.canvas.width, ctx.current.canvas.height)\n  }\n\n  const onMouseDown = (e) => {\n    setPosition({\n      x: e.pageX,\n      y: e.pageY\n    })\n    setMouseDown(true)\n  }\n\n  const onMouseUp = (e) => {\n    setMouseDown(false)\n  }\n\n  const onMouseMove = (e) => {\n    draw(e.pageX, e.pageY)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas\n        style={{\n          border: \"1px solid #000\"\n        }}\n        width={1200}\n        height={600}\n        ref={canvasRef}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onMouseLeave={onMouseUp}\n        onMouseMove={onMouseMove}\n      />\n      <br />\n      <select\n          style={{\n            padding: \"8px 24px\",\n            color: \"#0062ff\",\n            border: \"2px solid #0062ff\",\n            borderRadius: \"4px\"\n            }}\n\n        value={selectedColor}\n        onChange={(e) => setSelectedColor(e.target.value)}\n      >\n        {\n          colors.map(\n            color => <option \n            key={color} value={color}>{color}</option>\n          )\n        }\n      </select>\n\n      <select\n          style={{\n            marginLeft: \"24px\",\n            padding: \"8px 24px\",\n            color: \"#0062ff\",\n            border: \"2px solid #0062ff\",\n            borderRadius: \"4px\"\n            }}\n\n        value={selectedsize}\n        onChange={(e) => setSelectedsize(e.target.value)}\n      >\n        {\n          size.map(\n            size => <option \n            key={size} value={size}>{size}</option>\n          )\n        }\n      </select>\n\n      <button style={{\n          marginLeft: \"24px\",\n          padding: \"8px 24px\",\n          color: \"#0062ff\",\n          border: \"2px solid #0062ff\",\n          borderRadius: \"4px\"\n          }} onClick={clear}>Clear</button>\n      <button style={{\n          marginLeft: \"24px\",\n          padding: \"8px 24px\",\n          background: \"#0062ff\",\n          color: \"#ffffff\",\n          border: \"2px solid #0062ff\",\n          borderRadius: \"4px\"\n          }}\n      onClick={download}>Download</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}